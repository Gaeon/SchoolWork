#version 400 core
in vec4 vtxPosition;
//in vec4 vertorPosition;
//uniform mat4 wmat;
//uniform mat4 trans;
//uniform mat4 MVP;
in vec3 inNormal;


uniform vec3 uLightPos;

uniform mat4 pmat;

uniform mat4 vmat;
uniform mat4 worldMat;
vec4 a_Color;
out vec4 v_Color;
out vec4 v2_Color;
void main()
{
    gl_PointSize = 1.0f;

    a_Color=vec4(0.6,0,0,1);

    vec4 vPos=vtxPosition;
    vPos = vmat*worldMat*vPos;
    vec4 vLightPos=vmat*vec4(uLightPos,1.0f);
    vec3 lightDir = normalize(vLightPos.xyz-vPos.xyz);
    vec4 transNorm = vmat * worldMat *vec4(inNormal,0.0);
    vec3 tNorm=normalize(transNorm.xyz);
    v_Color = dot(lightDir,tNorm.xyz) * vec4(0.0,0,1.0,1.0);
    vec3 reflectedLight = normalize(reflect(lightDir,tNorm.xyz));
    vec3 viewDir = normalize(vec3(0,0,0)-vPos.xyz);
    v_Color+=pow(dot(reflectedLight,viewDir),10) * vec4(1.0,1.0,1.0,1.0);
    //v2_Color = vec4(v_Color,1.0);
    gl_Position = pmat*vPos;

    gl_Position = vtxPosition;
    v_Color=a_Color;
}
